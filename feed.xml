<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://design.jskyzero.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://design.jskyzero.com/" rel="alternate" type="text/html" /><updated>2024-06-18T12:36:39+00:00</updated><id>https://design.jskyzero.com/feed.xml</id><title type="html">设计者笔记</title><subtitle>jskyzero&apos;s notes about game designer.
</subtitle><entry><title type="html">动作游戏的本质</title><link href="https://design.jskyzero.com/2024/05/14/ActionGameDesign/" rel="alternate" type="text/html" title="动作游戏的本质" /><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://design.jskyzero.com/2024/05/14/ActionGameDesign</id><content type="html" xml:base="https://design.jskyzero.com/2024/05/14/ActionGameDesign/"><![CDATA[<p>本文介绍一种基于MDA理论的，理解动作游戏的方式或框架，方便读者在分析、理解、设计动作游戏时使用。</p>

<h1 id="动作游戏的本质与相关设计方法论">动作游戏的本质，与相关设计方法论</h1>

<p>🚧🚧🚧注意：本文有部分章节未补充详细案例，有待施工，但是本文结构是完整的。</p>

<h2 id="广义和狭义的动作游戏">广义和狭义的动作游戏</h2>

<p>本节想先讨论一些远离具体的设计的、有关动作游戏的宏观理解，这些作为一些基础铺垫，帮助我们深入理解动作游戏的核心特征与乐趣，逐步导出下文的一些理解、设计方法论。</p>

<p><img src="/assets/img/act/2022/03.jpg" alt="动作游戏核心体验" /></p>

<ul>
  <li>广义动作游戏</li>
</ul>

<p>本文无意对动作游戏的今生往世做细致详细的介绍，但是动作游戏是一个不同人理解起来相当容易产生歧义的游戏类型。归根结底，动作游戏的历史和内涵过于丰富，广泛存在于不同类型游戏的体验与机制上。</p>

<p>从这个角度，我们可以得到维基百科对动作游戏的广义定义：<strong>任何以动作为主要表现内容的游戏，都可以算作动作游戏。</strong>比如一些跨类别的动作游戏“影子”的例子：MOBA游戏中英雄的技能、射击游戏中近战动作……</p>

<!-- + 动作游戏与射击游戏的比较

从感受上来说，都是对于显示的模拟，一种是古朴一种是现代。
从制作上来说，射击易于制作
从玩家角度，射击易于掌握，同样都作为广泛基础类型 -->

<ul>
  <li>狭义（日式）动作游戏</li>
</ul>

<p>以广义去探讨，可能会像面对一整片森林去观察某种特定植物，未必能得到想要的答案。</p>

<p>如果你看了本博客的其他游戏分析，你会发现其中大多为日系动作游戏，维基百科中存在于另一个关于<strong><a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%B2%E3%83%BC%E3%83%A0">日式狭义动作的定义：分为2D和3D，2D分为横版卷轴、纵向卷轴、俯视角、固定画面；3D分为无双类、硬核动作、怪猎、魂like，格斗类则作为掌上明珠单独枚举</a></strong>。</p>

<ul>
  <li>我们所讨论的是</li>
</ul>

<p>更接近上面狭义（日式）动作游戏的定义，正如<a href="https://zhuanlan.zhihu.com/p/25481394">旗舰评论所言</a>：</p>

<blockquote>
  <p>日本定义下的狭义动作游戏，是若干个特别强调“反应与操作”的细分类型游戏的松散集合……把这些游戏类型从老到新列成一张表，它本身就是动作游戏设计的发展史：我们几乎找不出由欧美游戏设计师做出的设计创举。从最早的碰撞块和帧数判定理论开始，攻击-防御-投掷的基本三角克制关系是日本动作游戏设计出来的；跳跃和空中战是日本动作游戏设计出来的；群体战斗AI、主动性、QTE、一闪……这些设计也都是日本动作游戏先设计出来的……</p>
</blockquote>

<h2 id="动作游戏的哲学与本质">动作游戏的哲学与本质</h2>

<p>“动作”伴随着人类从动物形成社会的全过程，早已写入了人类的基因。当动作这个概念进行抽象并用于游戏娱乐，动作游戏诞生了。</p>

<p>动作游戏本质，抽象起来非常简单：<strong>玩家 控制 游戏角色 播放 动作。</strong></p>

<p><img src="/assets/img/act/2022/03-1.jpg" alt="动作游戏核心体验" /></p>

<h3 id="设计方法论奖惩导向">!!设计方法论：奖惩导向</h3>

<ul>
  <li>控制的乐趣</li>
</ul>

<p>岔一下话题，按照上文的抽象，如何让“控制”变得有趣？（这是一个很大的话题，也不局限于动作游戏。）</p>

<p>事实上，纯粹的控制的乐趣是很有限的，以游戏感理论框架来解释的话，单纯的控制主要的感受是：即时控制 &amp; 润色（特殊物理感受）。</p>

<p><img src="/assets/img/books/game_feeling/2.png" alt="" /></p>

<p>一种常见的，使得控制变得有趣的方式是，在设计上<strong>赋予控制这件事更多意义</strong>，也即，游戏感中理论的模拟空间的相关感受。</p>

<p>赋予更多意义这个思路下，一个非常有效的做法是<strong>奖惩导向</strong>，听起来很单纯：在玩家做出正确的控制时奖励，做出错误控制时惩罚。奖惩导向最基本也最广泛的例子是血量。</p>

<blockquote>
  <p>沿着奖惩这个思路，我们还可以理解，白金工作室GDC2016分享《无国界的动作游戏》中提到的，动作游戏是一种根据情形选择行为的被动游戏，“动作游戏就是设计场合与突破场合的方法”，这个设计思路。</p>

  <p>旗舰评论中也有段文字，表达相同的概念：“狭义动作游戏的历史，就是想尽办法去设计玩家可以判读的资讯，然后在他们做出正确的操作时奖励他们，在他们做出错误操作时惩罚他们。”</p>
</blockquote>

<ul>
  <li>奖惩设计方向的取舍</li>
</ul>

<p>在基本的奖惩导向方针以后，可能还会面临一个分配问题，是设计更多的考核场景？还是给玩家设计更多的选项？这里其实有一些选择的方式，比如：场合少选项多、场合多选项少（当然也可以俩都多），不同的倾向也可以为不同的游戏带来不同的乐趣。</p>

<ul>
  <li>此设计思路下的动作游戏特征</li>
</ul>

<p>按这个角度，动作游戏会需要：（可以带入一些没那么好的游戏作为反向例子理解）</p>

<ol>
  <li>能有奖惩的基础要求：
    <ol>
      <li>动画清晰明确</li>
      <li>判定精准可读（比如空间上遵循严格框体检测、时间上处于动画的合适位置）</li>
    </ol>
  </li>
  <li>玩家追求奖励收益最大化：
    <ol>
      <li>设计受击动画僵直时长，以设计不同的连招序列</li>
      <li>设计不同的控制方式：浮空、投技、眩晕等</li>
    </ol>
  </li>
</ol>

<h2 id="基于m-d-a理论的理解">基于M-D-A理论的理解</h2>

<p>收一收，我们继续把“玩家 控制 游戏角色 播放 动作。”这个底层逻辑，放入<strong>M机制-D动态-A美学</strong>理论框架中：</p>

<p><img src="/assets/img/act/2022/03-2.jpg" alt="动作游戏核心体验" /></p>

<p>这里给动作游戏的归纳了两个核心乐趣（虽然不具备啥泛用性）</p>

<ul>
  <li>控制感：内涵较为丰富，1.符合直觉的控制 2.丰富的控制选项 3.丰富的考核场景以带来正反馈</li>
  <li>打击感：聚焦于动作本身的美学呈现。</li>
</ul>

<p>我们可以尝试继续挖掘M-D-A三层：</p>

<p><img src="/assets/img/act/2022/04.jpg" alt="MDA框架" /></p>

<h3 id="设计方法论底层机制">!!设计方法论：底层机制</h3>

<ul>
  <li>状态机 逻辑轴 系统逻辑</li>
</ul>

<table>
  <thead>
    <tr>
      <th>项目</th>
      <th>说明</th>
      <th>举例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>状态机</td>
      <td>决定有多少个动画状态：长度、表现、跳转等</td>
      <td>一个Actor有idle walk show三个状态</td>
    </tr>
    <tr>
      <td>逻辑轴</td>
      <td>决定单个动画的框体变化、逻辑脚本执行、表现创建等</td>
      <td>walk状态有受击框</td>
    </tr>
    <tr>
      <td>系统规则</td>
      <td>其余更上层的规则，比如数值积蓄</td>
      <td>比如必须有3格能量才能释放（从idle跳转）show技能</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>一些比较典型的动作游戏的底层机制实现过程：</p>

    <ol>
      <li>攻击命中进入受击动画：攻击框与受击框有交集……（后略）</li>
      <li>投技的实现：投技框与受击框有交集……（后略）</li>
    </ol>
  </li>
</ul>

<h3 id="设计方法论微观循环">!!设计方法论：微观循环</h3>

<p>玩家不断在重复着：感知、认知、行动的过程。</p>

<ul>
  <li>针对感知的设计</li>
</ul>

<p><img src="/assets/img/act/2022/05.jpg" alt="" /></p>

<ul>
  <li>针对认知的设计</li>
</ul>

<p>这部分，理论上，玩家的认知决策规则，应该与设计师设计的规则维持一致，不再单独赘述。</p>

<p>这里补充一些典型的认知目标，和目标可能侧重的层次，如下：</p>

<table>
  <thead>
    <tr>
      <th>主要层次</th>
      <th>体验类别</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>行动</td>
      <td>远离攻击</td>
      <td>使用某些手段远离某个区域——多为攻击区域</td>
    </tr>
    <tr>
      <td>行动</td>
      <td>打点控制</td>
      <td>精确地调整人物位置、攻击朝向等，使得下次行为刚好命中目标部位</td>
    </tr>
    <tr>
      <td>行动</td>
      <td>搓招/Combo类</td>
      <td>连续完成一系列指令输入，通常控制在僵直时窗口内，输入方式可能会需要摇杆组合按键</td>
    </tr>
    <tr>
      <td>感知</td>
      <td>当身/返技类</td>
      <td>配合敌方动作判定，释放动作，一般可以产生额外效果</td>
    </tr>
    <tr>
      <td>认知</td>
      <td>抉</td>
      <td>结合当前情景（多为敌我位置、状态），从可选行为中选择最优行为</td>
    </tr>
    <tr>
      <td>认知</td>
      <td>量表计算类</td>
      <td>（显性或者隐性地）统计攻击造成的计数量表增加，并合理利用计数满额后的硬直等</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>针对行动的设计</li>
</ul>

<p><img src="/assets/img/act/2022/05-1.jpg" alt="" /></p>

<h3 id="设计方法论打击感">!!设计方法论：打击感</h3>

<p>这个话题太大了，这里不额外展开，典型打击感有：</p>

<ul>
  <li>攻击动作：开始、攻击、结束</li>
  <li>攻击特效：（略）</li>
  <li>受击动作：（略）</li>
</ul>

<h2 id="从微观到宏观蓝图">从微观到宏观蓝图</h2>

<p>前面讨论的更多是微观体验的切片，玩家玩到的游戏是一个具体的内容序列。就像离散的画面组成了电影；离散的动作组成了角色，离散的角色（作为敌人而言）组成了关卡，进而构成了游戏。</p>

<p>在具体的组成方式上，也是相当具有技巧的，一种常见的，用于指导构建复杂体验的方式，是体验蓝图，如下图：</p>

<p><img src="/assets/img/act/2022/06.jpg" alt="宏观设计" /></p>

<h2 id="简要总结">简要总结</h2>

<p>一图流，如图：</p>

<p><img src="/assets/img/act/2022/07.jpg" alt="简要总结" /></p>]]></content><author><name></name></author><category term="动作游戏分析" /><summary type="html"><![CDATA[本文介绍一种基于MDA理论的，理解动作游戏的方式或框架，方便读者在分析、理解、设计动作游戏时使用。]]></summary></entry><entry><title type="html">12种动作机制与120+案例</title><link href="https://design.jskyzero.com/2024/04/04/12_action_design_type/" rel="alternate" type="text/html" title="12种动作机制与120+案例" /><published>2024-04-04T00:00:00+00:00</published><updated>2024-04-04T00:00:00+00:00</updated><id>https://design.jskyzero.com/2024/04/04/12_action_design_type</id><content type="html" xml:base="https://design.jskyzero.com/2024/04/04/12_action_design_type/"><![CDATA[<p>重定向中……</p>

<script>window.location.replace("https://docs.qq.com/slide/DUmNkc2dhcVRXdWZa");</script>]]></content><author><name></name></author><category term="动作游戏分析" /><summary type="html"><![CDATA[重定向中……]]></summary></entry><entry><title type="html">机制出发-Dota2</title><link href="https://design.jskyzero.com/2024/01/26/dota2/" rel="alternate" type="text/html" title="机制出发-Dota2" /><published>2024-01-26T00:00:00+00:00</published><updated>2024-01-26T00:00:00+00:00</updated><id>https://design.jskyzero.com/2024/01/26/dota2</id><content type="html" xml:base="https://design.jskyzero.com/2024/01/26/dota2/"><![CDATA[<p>对Dota2的状态机制进行一些介绍，并浅聊一下从「机制」开始的游戏设计。</p>

<!-- TODO：现有机制，英雄状态矩阵图，机制视频，NGA DOTA2 WIKI-->

<h1 id="机制出发dota2中的25种状态机制">机制出发——Dota2中的25种状态机制</h1>

<h2 id="机制与困难的机制设计">机制，与困难的机制设计</h2>

<p>熟悉<a href="https://zh.wikipedia.org/wiki/MDA%E6%A1%86%E6%9E%B6">MDA框架</a>的同学可能会知道，如果用这个框架来指导设计，从任意层次开始都是可以的——当然从机制层面出发也是可以的。</p>

<p>这听起来非常合理：<strong>设计底层机制，然后影响玩家的动态行为，最后影响玩家的决策</strong>。</p>

<p><img src="/assets/img/gameplay/dota2/MDA.png" alt="" /></p>

<p>但是事实上，设计机制远没有说起来那么简单，甚至是一件<strong>非常困难的事情</strong>，一个好的机制可能有以下特征：</p>

<ul>
  <li>突破玩家的想象：没有见过的新东西</li>
  <li>有自然的“呈现”：表现容易理解，且有代入感</li>
  <li>能互相作用：涌现出多样的情形</li>
  <li>有可玩性：从游玩角度而言，有选择的空间、可对抗</li>
  <li>成本可控：从开发侧角度，能实现、可测试、可维护</li>
</ul>

<p>本文试图从Dota2的25种状态机制为切入，以一个体验丰富且成熟的MOBA游戏中，丰富的机制与其带来的体验为例，希望能为读者带来一些启发，帮助读者设计出更好的机制。</p>

<h2 id="dota2的状态机制">Dota2的状态机制</h2>

<p>先来一下问答环节:</p>

<ul>
  <li>为什么是Dota2</li>
</ul>

<p>因为Dota2很好的满足了上面提到的，好的机制的特征。在笔者所体验过的游戏中，如果要挑选一个<strong>机制最为天马行空、最为复杂丰富</strong>的游戏，那可能就是Dota2了，甚至，这款游戏还是一款<strong>经历过长久运营，和PVP平衡性考验</strong>的游戏。</p>

<ul>
  <li>为什么讨论状态机制</li>
</ul>

<p>笔者曾经思考过对于Dota2，最为出彩的地方是什么，思考下来有两点，一点是MOBA的底层机制；另一点是有趣的英雄玩法。</p>

<p>MOBA的底层机制已经有太多文章，并且有一些品类的局限性，和些许失去时效性，而有趣的英雄玩法，笔者粗略思考下来，核心是英雄丰富的体验，与自身、敌我带来的组合变化，而<strong>状态机制，则为这些丰富的体验和变化，提供了根基和发挥空间</strong>。如果有可能的话，下文也会结合一些英雄设计的例子，来进一步说明这种关系。</p>

<blockquote>
  <p>⚠️⚠️⚠️注意⚠️⚠️⚠️
Dota2是一款尚在运营，且持续更新（且时不时重大更新）的游戏，这意味着本文所记载的内容可能随着时间的经过而过时。虽然本文的的核心目标是给读者带来启发——这并不依赖于最新版本的规则，但是为了有需要的同学，本文末尾也会附上一些持续更新的说明链接。同时，人非圣贤，笔者的叙述也可能存在纰漏或者错误，笔者会尽量进行测试，但仍然重申，以实际游戏的运行规则为准。</p>
</blockquote>

<p>Dota2游戏内嵌的教学中对状态机制的一些描述：</p>

<p><img src="/assets/img/gameplay/dota2/1.png" alt="" /></p>

<h3 id="眩晕">眩晕</h3>

<p>眩晕是最为基础的状态机制，如上图所描述的，在眩晕期间，<strong>无法移动和执行任何动作</strong>。一个特殊的情况是，如果正在执行一些动作，那么<strong>当前动作将会被打断</strong>。</p>

<p>空说定义是一件很无趣的事情，举一些例子看看：</p>

<ul>
  <li>眩晕-无法移动和执行任何动作</li>
</ul>

<p>前面说过，眩晕期间无法移动和执行任何操作，这里的任何操作具体来说，有：普通攻击、使用技能、使用道具。</p>

<p>从设计目的上来说，眩晕是一种极其强力的控制手段，它剥夺了个人的操作空间，即便是高手也只能眼睁睁地看着别人“演出”，过程中任人宰割——当然，团队是可以救你的，怎么救可见下文。</p>

<p>一个有意思的点是，<strong>被动仍然是生效</strong>的——留意斧王自动释放的被动反击螺旋。</p>

<blockquote>
  <p>引申话题：虽然在状态持续过程中，无法执行任何操作，但是过程中下达的指令，在眩晕状态结束、能执行操作的时候，是会立刻去执行的。比如开黑黄杖或者使用闪烁技能逃走。一定程度上，这是给被控者处于被动方的优待，不至于要不停的狂按才能在第一时间行动。</p>
</blockquote>

<ul>
  <li>眩晕-打断当前动作</li>
</ul>

<p>眩晕期间是没操作空间了，那么之前<strong>进行到一半的操作呢？答案是直接被打断！</strong></p>

<p>留意齐天大圣试图释放猴子猴孙时，被发条技师的弹幕冲击一直打断。</p>

<p>这里有个有意思的地方是，被打断的行为如果要再次使用，是<strong>重新开始计算前摇</strong>的，也就是视频上，怎么放都放不出来的效果。</p>

<ul>
  <li>眩晕-重复叠加时（取效果最强）</li>
</ul>

<p>前面提到过状态之间的相互作用，作为我们认识的第一个状态，先看看这类状态<strong>同类和同类会发生什么反应</strong>。</p>

<p>可以看到，即便是同时叠加了两个眩晕状态，受害者的头上显示的计时条也是时长较长的那一个。也就是<strong>会取时长最长（效果最强）的那一个</strong>进行显示。</p>

<p>从结果来看貌似很合理？细致分析一下，首先眩晕的<strong>负面效果是无法升级叠加的</strong>——无法执行动作就无法执行动作了，还能咋办。需要考虑的是持续的时长，那么，对于时长有三种处理方式：1、叠加，取两者之和，2、后覆盖前，取最后添加的，3、并存，独立计时。</p>

<p>考虑到<strong>Dota2是一个团队游戏</strong>，对于叠加的逻辑，粗看是符合多人合作的，众人拾柴火焰高嘛，大家一起控就完事了；对于后覆盖前，考虑到有时候会将技能用来打伤害，万一这个技能带有小眩晕效果，可能会提前结束之前较长的眩晕时长的控制，反而坏了事，这个场合是有很多弊端、会带来不可控的体验的；对于并存独立计时，这会导致一定程度上时长的浪费，但是却把浪费多少的选择给到了操作者，将<strong>收益直接绑定到了玩家的操作</strong>，让玩家卷无止境，比简单的叠加更具有操作导向。</p>

<ul>
  <li>眩晕-提前结束时（驱散）</li>
</ul>

<h3 id="缠绕">缠绕</h3>

<p>缠绕状态会使英雄无法移动，但可以攻击和使用技能。例如，Treant Protector的技能”Overgrowth”可以缠绕敌方英雄。</p>

<h3 id="束缚">束缚</h3>
<p>束缚状态会使英雄无法移动和攻击，但可以使用技能。例如，Bane的技能”Fiend’s Grip”可以束缚敌方英雄。</p>

<h3 id="变羊">变羊</h3>
<p>变羊状态会使英雄无法移动、攻击或使用技能，并且外观会变成羊。例如，Shadow Shaman的技能”Hex”可以将敌方英雄变成羊。</p>

<h3 id="吹风">吹风</h3>
<p>吹风状态会使英雄被吹起，无法移动、攻击或使用技能。例如，Invoker的技能”Tornado”可以将敌方英雄吹起。</p>

<h3 id="隐藏驱逐">隐藏/驱逐</h3>
<p>隐藏/驱逐状态会使英雄消失，无法被攻击或使用技能。例如，Outworld Devourer的技能”Astral Imprisonment”可以将敌方英雄驱逐。</p>

<h3 id="失明">失明</h3>
<p>失明状态会使英雄的物理攻击有一定几率失效。例如，Tinker的技能”Laser”可以使敌方英雄失明。</p>

<h3 id="沉默">沉默</h3>
<p>沉默状态会使英雄无法使用技能。例如，Silencer的技能”Global Silence”可以使所有敌方英雄沉默。</p>

<h3 id="锁闭">锁闭</h3>
<p>锁闭状态会使英雄无法使用物品。例如，Doom的技能”Doom”可以锁闭敌方英雄。</p>

<h3 id="破坏">破坏</h3>
<p>破坏状态会使英雄的某些技能或物品失效。例如，Axe的技能”Culling Blade”可以破坏敌方英雄的生命恢复效果。</p>

<h3 id="缴械">缴械</h3>
<p>缴械状态会使英雄无法进行物理攻击。例如，Legion Commander的技能”Duel”可以缴械敌方英雄。</p>

<h3 id="减速">减速</h3>
<p>减速状态会降低英雄的移动速度。例如，Venomancer的技能”Venomous Gale”可以减速敌方英雄。</p>

<h3 id="陷阱">陷阱</h3>
<p>陷阱状态会使英雄无法移动。例如，Clockwerk的技能”Cogs”可以将敌方英雄困在陷阱中。</p>

<h3 id="屏障">屏障</h3>
<p>屏障状态会为英雄提供一定的伤害吸收。例如，Abaddon的技能”Aphotic Shield”可以为友方英雄提供屏障。</p>

<h3 id="嘲讽">嘲讽</h3>
<p>嘲讽状态会使英雄被迫攻击某个目标。例如，Axe的技能”Berserker’s Call”可以嘲讽周围的敌方英雄。</p>

<h3 id="恐惧">恐惧</h3>
<p>恐惧状态会使英雄被迫向基地方向移动，无法进行其他操作。例如，Queen of Pain的技能”Scream of Pain”有一定几率使敌方英雄恐惧。</p>

<h3 id="催眠">催眠</h3>
<p>催眠状态会使英雄无法进行任何操作，但受到伤害会醒来。例如，Bane的技能”Nightmare”可以使敌方英雄催眠。</p>

<h3 id="强制移动">强制移动</h3>
<p>强制移动状态会使英雄被迫移动到某个位置。例如，Batrider的技能”Flaming Lasso”可以强制移动敌方英雄。</p>

<h3 id="传送闪烁">传送/闪烁</h3>
<p>传送/闪烁状态会使英雄瞬间移动到某个位置。例如，Anti-Mage的技能”Blink”可以使他瞬间移动。</p>

<h3 id="隐形">隐形</h3>
<p>隐形状态会使英雄无法被敌方视野内的单位和建筑看到。例如，Riki的技能”Permanent Invisibility”可以使他持续隐形。</p>

<h3 id="相位">相位</h3>
<p>相位状态会使英雄无法被攻击和碰撞，但可以移动和使用技能。例如，Puck的技能”Phase Shift”可以使他进入相位状态。</p>

<h3 id="无敌">无敌</h3>
<p>无敌状态会使英雄无法被攻击和使用技能，但可以移动。例如，Juggernaut的技能”Blade Fury”可以使他进入无敌状态。</p>

<h3 id="技能免疫">技能免疫</h3>
<p>技能免疫状态会使英雄免疫所有技能效果。例如，Lifestealer的技能”Rage”可以使他进入技能免疫状态。</p>

<h3 id="攻击免疫">攻击免疫</h3>
<p>攻击免疫状态会使英雄免疫所有物理攻击。例如，Omniknight的技能”Guardian Angel”可以使友方英雄进入攻击免疫状态。</p>

<h3 id="虚灵">虚灵</h3>
<p>虚灵状态会使英雄免疫所有物理攻击，但会受到额外的魔法伤害。例如，Pugna的技能”Decrepify”可以使目标进入虚灵状态。</p>

<h3 id="总结">总结</h3>

<h2 id="其他参考">其他参考</h2>]]></content><author><name></name></author><category term="专题报告" /><summary type="html"><![CDATA[对Dota2的状态机制进行一些介绍，并浅聊一下从「机制」开始的游戏设计。]]></summary></entry><entry><title type="html">技术讨论：Excel必知必会</title><link href="https://design.jskyzero.com/2023/12/31/Excel/" rel="alternate" type="text/html" title="技术讨论：Excel必知必会" /><published>2023-12-31T00:00:00+00:00</published><updated>2023-12-31T00:00:00+00:00</updated><id>https://design.jskyzero.com/2023/12/31/Excel</id><content type="html" xml:base="https://design.jskyzero.com/2023/12/31/Excel/"><![CDATA[<p>本文希望从游戏策划的角度，讲讲Excel的一些基础知识和常见用法，希望能对读者有所启发。</p>

<h1 id="游戏策划的excel手册">游戏策划的Excel手册</h1>

<h2 id="前言">前言</h2>

<h2 id="how-to">How-to</h2>

<h3 id="下拉框">下拉框</h3>

<h2 id="总结">总结</h2>]]></content><author><name></name></author><summary type="html"><![CDATA[本文希望从游戏策划的角度，讲讲Excel的一些基础知识和常见用法，希望能对读者有所启发。]]></summary></entry><entry><title type="html">ACT-手游-绝区零</title><link href="https://design.jskyzero.com/2023/11/28/zzz/" rel="alternate" type="text/html" title="ACT-手游-绝区零" /><published>2023-11-28T00:00:00+00:00</published><updated>2023-11-28T00:00:00+00:00</updated><id>https://design.jskyzero.com/2023/11/28/zzz</id><content type="html" xml:base="https://design.jskyzero.com/2023/11/28/zzz/"><![CDATA[<h1 id="绝区零战斗系统拆解">绝区零战斗系统拆解</h1>

<h2 id="关键结论">关键结论</h2>

<ul>
  <li>战斗体验偏爽（数字、角色动作速度、特写）</li>
  <li>基础战斗品质很高</li>
  <li>剧情演出有分级+节约成本（播片、角色大头对话、动态漫画、场景模型镜头对话、短信）</li>
  <li>场景和怪物，资产&amp;体验，有重复度</li>
  <li>养成、玩法系统基本手游&amp;米家老套路</li>
</ul>

<h2 id="战斗玩法">战斗玩法</h2>

<p><img src="/assets/img/gameplay/zzz/1.png" alt="" /></p>

<h2 id="角色能力">角色能力</h2>

<p><img src="/assets/img/gameplay/zzz/2.png" alt="" /></p>

<p>附上应该是官网的机制说明：</p>

<p><img src="/assets/img/gameplay/zzz/0-0.png" alt="" />
<img src="/assets/img/gameplay/zzz/0-1.png" alt="" /></p>

<h2 id="角色数值">角色数值</h2>

<p><img src="/assets/img/gameplay/zzz/3.png" alt="" /></p>]]></content><author><name></name></author><category term="游戏体验" /><summary type="html"><![CDATA[绝区零战斗系统拆解]]></summary></entry><entry><title type="html">GDC动作游戏分享精选</title><link href="https://design.jskyzero.com/2023/11/13/ACT_with_GDC/" rel="alternate" type="text/html" title="GDC动作游戏分享精选" /><published>2023-11-13T00:00:00+00:00</published><updated>2023-11-13T00:00:00+00:00</updated><id>https://design.jskyzero.com/2023/11/13/ACT_with_GDC</id><content type="html" xml:base="https://design.jskyzero.com/2023/11/13/ACT_with_GDC/"><![CDATA[<h1 id="act相关的gdc记录">ACT相关的GDC记录</h1>

<!--s-->

<h2 id="capcom">Capcom</h2>

<!--v-->

<h3 id="2017-街霸5">2017-街霸5</h3>

<p>在满足能够瞬间传达信息的前提下，再考虑游戏画面的独特美术表现，这就是格斗游戏的艺术。</p>

<p><img src="/assets/img/skill/GDC/1.png" alt="" /></p>

<!--v-->

<h3 id="2018-怪物猎人世界">2018-怪物猎人世界</h3>

<p>基于试作与反复试验的概念设计。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://www.bilibili.com/video/BV1vW411u7NN">Bilibili</a>，<a href="https://www.gcores.com/videos/174499">中译</a></p>
  </li>
</ul>

<!--v-->

<h3 id="2019-鬼泣5">2019-鬼泣5</h3>

<p>动作游戏的核心乐趣：克服困难调整的成就感，这是30多年未改变的真理。</p>

<p><img src="/assets/img/skill/GDC/2.png" alt="" /></p>

<!--s-->

<h2 id="platinumgames">PlatinumGames</h2>

<!--v-->

<h3 id="2016-无国界act">2016-无国界ACT</h3>

<p>动作游戏的本质是“被动游戏”：要求玩家根据不同的“状况”做出对应的响应。</p>

<p><img src="/assets/img/skill/GDC/3.png" alt="" /></p>

<!--v-->

<h3 id="2018-尼尔">2018-尼尔</h3>

<p>3D动作游戏通识 &amp; RPG中“虚假”的自由。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://www.youtube.com/watch?v=jKbH9i5axxU">Youtube</a>，<a href="https://www.bilibili.com/read/cv3530623/">中译</a></p>
  </li>
</ul>

<!--s-->

<!-- ## KOEI TECMO -->

<!--v-->

<!-- ### 2017-仁王

从测试中调整游戏。

+ 🚧待施工

+ 相关参考：[Youtube](https://www.youtube.com/watch?v=bqCSzO15VME) -->

<!--s-->

<!-- ## Nintendo -->

<!--v-->

<!-- ### 1999-宫本茂

游戏是一个更大、更广阔的世界的一部分。

+ 🚧待施工

+ 相关参考：[Youtube](https://www.youtube.com/watch?v=a9DlhDRZ0yA) -->

<!--v-->

<!-- ### 2005-岩田聪

玩家之心

+ 🚧待施工

+ 相关参考：[Youtube](https://www.youtube.com/watch?v=RMrj8gdUfCU)，[中译](https://www.bilibili.com/video/BV1FA41147j7) -->

<!--v-->

<!-- ### 2017-Zelda:BotW

勇气三角，革新玩法；智慧三角，想法落地；力量三角，美学统一。

+ 🚧待施工

+ 相关参考：[Youtube](https://www.youtube.com/watch?v=QyMsF31NdNc)，[中译](https://cowlevel.net/article/2091350)，[中译2](http://www.gamelook.com.cn/2022/12/504104) -->

<!--s-->
<h2 id="santa-monica-studio">Santa Monica Studio</h2>

<!--v-->

<h3 id="2019-战神-战斗系统">2019-战神-战斗系统</h3>

<p>新视角下战斗系统的革新。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://www.youtube.com/watch?v=hE5tWF-Ou2k">Youtube</a>，<a href="https://indienova.com/indie-game-development/evolving-combat-in-god-of-war-for-a-new-perspective/">中译</a></p>
  </li>
</ul>

<!--v-->

<h3 id="2019-战神-关卡">2019-战神-关卡</h3>

<p>6条新关卡设计规则 &amp; 关卡从概念到完成的最佳实践。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://www.youtube.com/watch?v=eSB29qx6sWw">Youtube</a>，<a href="http://www.gamelook.com.cn/2021/06/445171">中译</a></p>
  </li>
</ul>

<!--v-->

<h3 id="2019-战神-重启">2019-战神-重启</h3>

<p>创造新战神之路似乎是无休止地攀登一座大山，在无数失败后迎来成功。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://www.youtube.com/watch?v=aIb-Lt7WX_s">Youtube</a>，<a href="https://www.bilibili.com/video/av50616216">中译</a></p>
  </li>
</ul>

<!--v-->

<h3 id="2023-战神-ai">2023-战神-AI</h3>

<p>战神AI从Lua转行为树的迭代 &amp; 经验之谈。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://www.gdcvault.com/play/1029286/Preparing-AI-Systems-for-God">GDC Vault</a>，<a href="https://zhuanlan.zhihu.com/p/627081489">中译</a></p>
  </li>
</ul>

<!--s-->

<h2 id="ftg相关">FTG相关</h2>

<!--v-->

<!-- ### 2014-骷髅女孩

如何在2D游戏中获得最清晰、最流畅的动画并使其与游戏玩法配合。

+ 🚧待施工

+ 相关参考：[Youtube](https://www.youtube.com/watch?v=bqCSzO15VME) -->

<!--v-->

<!-- ### 2015-骷髅女孩

2D传统动画演示，Skullgirls的动画制作方式。

+ 🚧待施工

+ 相关参考：[Youtube](https://www.youtube.com/watch?v=z-5djm1pRpU) -->

<!--v-->

<h3 id="2015-罪恶装备xrd">2015-罪恶装备Xrd</h3>

<p>在现代全3D图形框架内重建经典2D格斗游戏，同时保留其所有老式2D魅力。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://www.youtube.com/watch?v=yhGjCzxJV3E">Youtube</a></p>
  </li>
</ul>

<!--v-->

<h3 id="2019-ftg-10年来的易玩性">2019-FTG 10年来的易玩性</h3>

<p>如何为古老的FTG游戏扩充受众。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://www.youtube.com/watch?v=yhGjCzxJV3E">Youtube</a></p>
  </li>
</ul>

<!--s-->

<h2 id="音乐音效相关">音乐/音效相关</h2>

<!--v-->

<h3 id="2015-血源">2015-血源</h3>

<p>具有挑战性的合唱写作和扩展的管弦乐技巧如何唤起绝望、疾病缠身的亚南市。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://gdcvault.com/play/1023339/The-Gothic-Horror-Music-of">GDC Vault</a></p>
  </li>
</ul>

<!--s-->
<h2 id="非gdc">非GDC</h2>

<!--v-->

<h3 id="迪士尼-动画的12个原则">迪士尼-动画的12个原则</h3>

<p>一些帮助鉴赏&amp;改进动画的方法论</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://en.wikipedia.org/wiki/Twelve_basic_principles_of_animation">Wikipedia</a>, <a href="https://www.bloopanimation.com/zh/the-12-principles-of-animation/">翻译</a></p>
  </li>
</ul>

<!--v-->

<h3 id="河森正治-原创性">河森正治-原创性</h3>

<p>跟不同次元的事物融合！</p>

<p><img src="/assets/img/skill/GDC/4.png" alt="" /></p>

<!--v-->

<h3 id="徳田优也-mhw设计">徳田优也-MHW设计</h3>

<p>《怪物猎人：世界》从概念、创意、制作和调整。</p>

<ul>
  <li>
    <p>🚧待施工</p>
  </li>
  <li>
    <p>相关参考：<a href="https://cedil.cesa.or.jp/cedil_sessions/view/1942">CEDEC 2018</a>, <a href="https://www.bilibili.com/video/BV1LM4y1n7Pd">翻译</a></p>
  </li>
</ul>]]></content><author><name></name></author><category term="动作游戏分析" /><summary type="html"><![CDATA[ACT相关的GDC记录]]></summary></entry><entry><title type="html">游戏设计：战斗策划要求</title><link href="https://design.jskyzero.com/2023/10/23/BattleDesignAbility/" rel="alternate" type="text/html" title="游戏设计：战斗策划要求" /><published>2023-10-23T00:00:00+00:00</published><updated>2023-10-23T00:00:00+00:00</updated><id>https://design.jskyzero.com/2023/10/23/BattleDesignAbility</id><content type="html" xml:base="https://design.jskyzero.com/2023/10/23/BattleDesignAbility/"><![CDATA[<p>最近汇总了米哈游和腾讯一些社会招聘岗位关于<strong>战斗策划怪物方向</strong>的岗位描述和能力要求，做了一些资料汇总和总结的工作。用于后续能力补足的参考。</p>

<h1 id="战斗策划怪物方向能力要求">战斗策划(怪物方向)能力要求</h1>

<h2 id="社招信息汇总">社招信息汇总</h2>

<p>不废话，直接上图：</p>

<p><img src="/assets/img/others/BattleDesignAbility/1.png" alt="" /></p>

<blockquote>
  <p>相关信息皆来自网络，时效性截止于本文编写日期。</p>
</blockquote>

<h2 id="要求能力细分">要求能力细分</h2>

<p>能力要求的信息太多了，这里进行5个维度的划分：</p>

<p><img src="/assets/img/others/BattleDesignAbility/2.png" alt="" /></p>

<h3 id="既往背景">既往背景</h3>

<p>这部分要求相对较低，如果一开始就是PVE战斗“赛道”的，相对要求并不算苛刻。</p>

<p>但是如果是应届生或者换方向的，可能会被这些“硬性要求”所卡住，建议是快进到别的要求，用实力弥补不足。</p>

<ul>
  <li>工作年限要求：2-3年，大概的意思是要求熟练工</li>
  <li>学历要求：本科以上，计算机方向优先</li>
  <li>工作经历要求：多为岗位相关要求，比如熟悉工作流程、有上线过的产品等</li>
</ul>

<p><img src="/assets/img/others/BattleDesignAbility/2-1.png" alt="" /></p>

<h3 id="游戏积累">游戏积累</h3>

<p>这部分属于日积月累的“软知识”，一般是用于了解对行业相关产品的积累和认知。</p>

<p>基本都提到了修饰量级的词语，比如<code class="language-plaintext highlighter-rouge">丰富</code>、<code class="language-plaintext highlighter-rouge">有积累</code>、<code class="language-plaintext highlighter-rouge">长期</code>，还提到了要对体验有自己的深入了解和思考。</p>

<p>简单来说：</p>

<ul>
  <li>多玩：丰富动作游戏体验</li>
  <li>多想：深入思考、研究、和积累</li>
</ul>

<p><img src="/assets/img/others/BattleDesignAbility/2-2.png" alt="" /></p>

<h3 id="专业技能">专业技能</h3>

<p>这部分简单来说就是硬实力，具体<strong>生产内容</strong>的能力，这里化为为以下几个维度</p>

<ul>
  <li>技术工具：熟悉引擎和一些技术手段</li>
  <li>制作流程：使用专业的编辑器实现设计</li>
  <li>设计能力：设计出好的内容</li>
</ul>

<p><img src="/assets/img/others/BattleDesignAbility/2-3.png" alt="" /></p>

<h3 id="综合能力">综合能力</h3>

<p>对应于硬实力的软实力，这里我们分为：</p>

<ul>
  <li>追求卓越：高标准严要求！</li>
  <li>通用能力：沟通、团队合作、逻辑、用户分析……</li>
</ul>

<p><img src="/assets/img/others/BattleDesignAbility/2-4.png" alt="" /></p>

<h3 id="熟悉ip">熟悉IP</h3>

<p>相对而言，我认为熟悉IP（或者主题，下面都以IP代替）是最次要的一点，因为这是可以快速补足的。</p>

<p>虽然熟悉的这个过程本身可以补，但是重要的是，你是否喜欢这个IP——毕竟接下来所有的工作都会围绕它展开。</p>

<p>扪心自问，是否可以围绕这个IP做出一些令人眼前一亮的设计？或者对这个IP的未来是否充满憧憬和想象力？</p>

<p><img src="/assets/img/others/BattleDesignAbility/2-5.png" alt="" /></p>

<h2 id="总结">总结</h2>

<p>虽然找工作的难度是一个<strong>取决于市场供需环境</strong>的事情，但是时不时看一下当前行业对从业人员的要求，对于学习方向的指导和自我提升方向，也是相当有启发的。</p>]]></content><author><name></name></author><category term="游戏开发" /><summary type="html"><![CDATA[最近汇总了米哈游和腾讯一些社会招聘岗位关于战斗策划怪物方向的岗位描述和能力要求，做了一些资料汇总和总结的工作。用于后续能力补足的参考。]]></summary></entry><entry><title type="html">AI反拆：只狼狮子猿</title><link href="https://design.jskyzero.com/2023/10/10/sekiro_lion_tamarin_AI/" rel="alternate" type="text/html" title="AI反拆：只狼狮子猿" /><published>2023-10-10T00:00:00+00:00</published><updated>2023-10-10T00:00:00+00:00</updated><id>https://design.jskyzero.com/2023/10/10/sekiro_lion_tamarin_AI</id><content type="html" xml:base="https://design.jskyzero.com/2023/10/10/sekiro_lion_tamarin_AI/"><![CDATA[<p>之前拆包看了<a href="https://design.jskyzero.com/2023/02/17/sekiro_lion_tamarin/">只狼的狮子猿的一阶段动画</a>，本文则会对怪物的AI进行一些讨论和分析，并对之前文章的一些错误结论进行勘误。</p>

<p>本文的目标是以狮子猿一阶段<strong>成熟完备的AI</strong>为例子，让读者能对动作游戏中AI的设计有一个初步的理解，并分析一些对实际工作中设计有启发的逻辑细节。本文会分为三个部分：初步的体验反推、拆包后对主AI分析的架构设计、以及细节和感受分析和讨论。</p>

<h1 id="拆包看狮子猿ai设计">拆包看狮子猿AI设计</h1>

<h2 id="相关阅读">相关阅读</h2>

<p>事后在网上搜了相关主题的文章，已经有大量有价值的文章了，本文的突出特点是直达本质、体验分析不足，可以阅读下面的文章用作参考：</p>

<ul>
  <li><a href="https://zhuanlan.zhihu.com/p/614731111">如何设计有“对话感”的BOSS？《只狼》Ai完全拆解。</a></li>
</ul>

<h2 id="初步的体验反推">初步的体验反推</h2>

<p>首个尝试，使用挑选一段战斗序列进行反推的古典方式，初步分析一些关于节奏和感受的结论。</p>

<p>和狮子猿录了一段素材，用肉眼将动作与之前的状态机进行匹配，得到了如下的结果：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/1.png" alt="" /></p>

<blockquote>
  <p>全程视频可参考：<a href="https://www.bilibili.com/video/BV1kj411Y7bC">Bilibili 笨办法</a></p>
</blockquote>

<p>其中的标注和动画状态机对应如下表所示：</p>

<table>
  <thead>
    <tr>
      <th>标注</th>
      <th>类别</th>
      <th>动画</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>连段1</td>
      <td>花里胡哨类</td>
      <td>3019;3020</td>
    </tr>
    <tr>
      <td>连段2</td>
      <td>花里胡哨类</td>
      <td>3000;3001</td>
    </tr>
    <tr>
      <td>连段2.变种</td>
      <td>花里胡哨类</td>
      <td>3000</td>
    </tr>
    <tr>
      <td>连段3</td>
      <td>花里胡哨类</td>
      <td>3003;3004</td>
    </tr>
    <tr>
      <td>连段4</td>
      <td>花里胡哨类</td>
      <td>3021</td>
    </tr>
    <tr>
      <td>跳跃攻击</td>
      <td>记忆点类</td>
      <td>3014</td>
    </tr>
    <tr>
      <td>红光1</td>
      <td>记忆点类</td>
      <td>3016</td>
    </tr>
    <tr>
      <td>空窗期</td>
      <td>表演类</td>
      <td>四方向闪避位移</td>
    </tr>
    <tr>
      <td>空窗期</td>
      <td>表演类</td>
      <td>原地吼，3018</td>
    </tr>
  </tbody>
</table>

<h3 id="交错比例与招式cd">交错比例与招式CD</h3>

<p>从这个视频中我们可以得出一些初步的结论:</p>

<ul>
  <li>攻击与空隙交错，比例是？</li>
</ul>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/2.png" alt="" /></p>

<p>大体上，狮子猿会维持如上图所示【攻击，空窗期】这样的单元重复，以此营造出凶猛进攻和灵动移动结合的交手体验。</p>

<p>其中，攻击的长度观察为1-4个完整招式，而空窗期通常为一次闪避位移。</p>

<ul>
  <li>招式没有复读，CD是？</li>
</ul>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/3.png" alt="" /></p>

<p>将招式分别拆开，我们会发现同个招式没有连续两次出现的情况。观察两个招式之间的最短间隔时长（从上一个末尾到下一个的开始）：</p>

<table>
  <thead>
    <tr>
      <th>标注</th>
      <th>最短时间间隔约</th>
      <th>动画</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>连段1</td>
      <td> </td>
      <td>3019;3020</td>
    </tr>
    <tr>
      <td>连段2与变种</td>
      <td>6</td>
      <td>3000;3001</td>
    </tr>
    <tr>
      <td>连段3</td>
      <td> </td>
      <td>3003;3004</td>
    </tr>
    <tr>
      <td>连段4</td>
      <td>6</td>
      <td>3021</td>
    </tr>
    <tr>
      <td>跳跃攻击</td>
      <td>50</td>
      <td>3014</td>
    </tr>
    <tr>
      <td>红光1</td>
      <td>9</td>
      <td>3016</td>
    </tr>
    <tr>
      <td>空窗期</td>
      <td>5</td>
      <td>四方向闪避位移</td>
    </tr>
  </tbody>
</table>

<h3 id="用行为树的简单拟合">用行为树的简单拟合</h3>

<p>总结一些关键结论：</p>

<ol>
  <li>攻击行为与空窗期相间</li>
  <li>攻击行为自身有间隔</li>
</ol>

<p>我们可以使用行为树对这个<code class="language-plaintext highlighter-rouge">出招序列</code>进行一个简单的拟合：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/4.png" alt="" /></p>

<p>这个决策逻辑逻辑看起来很简单，因为这段战斗也只是一个局部序列，有着一定的局限性，不过还是做一个思考练习，如何让这个逻辑变得更好？</p>

<ul>
  <li>与战斗进程挂钩的空窗间隔</li>
</ul>

<p>简单来说，通过<strong>控制空窗期的CD来控制玩家的战斗压力</strong>，结合一个能反映玩家战斗进程的数值——比如血量或者时间，就可以形成差异化的心流体验或者战斗历程。</p>

<ul>
  <li>更加复杂且细致的条件</li>
</ul>

<p>和上面的思路类似，我们可以<strong>为不同的技能设置除了CD以外更加细致的条件</strong>，比如关联自身血量，对于只狼来说，基础重要属性还有自身的架势槽；对于一个常规的动作游戏，还可以关联敌我的空间位置关系等条件。</p>

<ul>
  <li>攻击前的调整位置</li>
</ul>

<p>对于一个动作游戏，招式的适用打击距离，一般是有限的。比如一个前冲拳，能冲的距离可能最多4米，那么对于4米外的目标，可能就<strong>需要先靠近目标再释放</strong>，不然就会形成空挥的体验（当然，空挥也是一种体验！）。对于4米内过近的目标，可能也需要先远离，避免一些不好的表现。</p>

<p>这部分可以通过设置招式前的距离检测来避免。这些检测相应的也会造成限制从而降低释放的可能性，这是一个取舍问题。</p>

<h3 id="小结一定收获但局限">小结：一定收获但局限</h3>

<p>以传统而经典的行为树配置方法的话，对狮子猿AI的分析大致如上所述。当然，文章的长度已经出卖了作者，下文才是本次分析的重点，但是上文所叙述一些经典分析方法乃至思路也是相当重要的。</p>

<p>那么话不多说，我们来看看拆包/反编译后的狮子猿AI的LUA脚本。</p>

<h2 id="基于lua的架构设计">基于LUA的架构设计</h2>

<p>本部分我们讨论一些宏观架构相关的话题，有时会使用行为树来对比，方便理解两者之间使用和思维的差异性。</p>

<p>本节的目标是通过对架构的分析，带来一些思路的启发，从规则层面改善AI编写的效能。</p>

<h3 id="决策与逻辑分离">决策与逻辑分离</h3>

<p>拆包后的lua文件大致如下所示：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/5.png" alt="" /></p>

<blockquote>
  <p>原始内容可以参考：<a href="/assets/img/gameplay/sekiro_lion_tamarion_ai/510000_battle.dec.lua">狮子猿 510000_battle.dec.lua</a>，后文部分内容涉及到<a href="/assets/img/gameplay/sekiro_lion_tamarion_ai/509000_battle.dec.lua">蝴蝶夫人 509000_battle.dec.lua</a></p>
</blockquote>

<p>最外层是若干函数，如下图所示这里将其分了四类，具体的逻辑我们将在第三部分展开叙述。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/6.png" alt="" /></p>

<p>和传统的行为树比，有一个非常具体的区别，只狼（或者说FromSoftware的游戏）的AI是将主决策逻辑和行为逻辑分开的。比如上图所示的<code class="language-plaintext highlighter-rouge">Activate</code>函数里面是主决策逻辑，里面会在一定条件下调用不同的<code class="language-plaintext highlighter-rouge">ActXX</code>系列函数。</p>

<p>这样做有什么好处呢？我认为是<strong>高效复用</strong>和<strong>分离逻辑</strong>。</p>

<h4 id="高效复用">高效复用</h4>

<p>先从高效复用说起，在行为树的语境里，如果<strong>在两个地方都需要同一段逻辑</strong>，最简单的方法是直接拷贝一串逻辑过去，这样会很简单，但是问题就是，下次修改时，容易遗漏，或者出其他差错。</p>

<p>相对完善的方法是，<strong>编写一个AI子树</strong>，去定义一些传递的黑板变量，但是这个操作的成本就会变高，普遍需要管理独立的新文件，增加心智上的负担。</p>

<p>而使用脚本语言，则可以利用编程语言自带的函数的语法，来高效实现这一过程。（这里并不是说使用LUA脚本，就比行为树要好，只是各自有不同的特点。）</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/7.png" alt="" /></p>

<h4 id="分离逻辑">分离逻辑</h4>

<p>另一个话题则是分离逻辑，如果你配置过复杂AI的话，应该能理解<strong>AI设计的核心问题之一，就是解决复杂度的问题</strong>，这需要工程学的方法、可扩展且表达力强的通用架构、编写时符合直觉的逻辑思路等等……</p>

<p><strong>将问题划分、以大化小的分治法</strong>也是核心思路之一，将行为逻辑和决策逻辑分开，能让双方聚焦各自的问题：决策逻辑负责复杂的条件检测，调用行为；而行为逻辑则只解决一个具体行为的实现，这里也可能会有一定的条件检测。但是是服务于这个行为的。这样，在面对复杂逻辑时，就可以将复杂逻辑化为若干部分，分别实现，避免干扰。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/8.png" alt="" /></p>

<blockquote>
  <p>一个类似思路的、在软件工程的语境的例子是<a href="https://developer.mozilla.org/en-US/docs/Glossary/MVC">MVC架构（Model-View-Controller，模型-视图-控制器）</a>。将软件分为：数据描述相关、处理交互视图相关、处理如何控制数据相关，三个部分各司其职，避免互相干涉带来的心智负担。</p>
</blockquote>

<h3 id="带条件检测的行为队列">带条件检测的行为队列</h3>

<p>本小节我们聚焦到一个具体的行为的架构设计。比如【靠近，A招式，B招式】的一个行动序列。</p>

<p>在行为树的语境中，会使用运行节点来描述一个耗时的行为，大概会如下图所示去实现：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/9.png" alt="" /></p>

<p>想象一下这样的命令在Lua的一个函数中应该怎样描述实现？对于单个命令，下达单个的命令指令就行，但是当涉及到一连串连续执行的命令，就会麻烦一些。</p>

<h4 id="行为队列">行为队列</h4>

<p>答案是维护一个行为的“队列”，对于【靠近，A招式，B招式】这个序列，就添加靠近，A招式，B招式三个命令，等到执行的时候按照队列的先进先出的顺序挨个执行。</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ApproachTarget</span><span class="p">,</span> <span class="n">f3_local4</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">f3_local1</span><span class="p">,</span> <span class="n">TARGET_SELF</span><span class="p">,</span> <span class="n">f3_local3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ComboTunable_SuccessAngle180</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">f3_local5</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="mi">999</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ComboRepeat_SuccessAngle180</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">f3_local6</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="mi">999</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>类似下图，这是Act01行为的<strong>两个攻击的添加命令的代码</strong>和<strong>开发者工具观察实际执行的Goal队列</strong></p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/10.png" alt="" /></p>

<p>可以观察到，添加命令（或者，行动目标，这里维持统一还是使用命令这个词）时候，有非常多的参数，除了常规描述行为是啥的自身关键参数，还有一个时间参数。主要是用于避免操控的对象一致处于某个行为中，给个超时。</p>

<blockquote>
  <p>在只狼的架构中，这个时间在自己执行的时候才会开始倒数，还有一种做法是，在添加入执行队列就开始倒数，应该也是一种规则。</p>
</blockquote>

<h4 id="条件检测的时效性">条件检测的时效性</h4>

<p>找了一个移动和释放攻击的命令的指令，大概对应的一下参数的含义，如下图所示。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/11.png" alt="" /></p>

<ul>
  <li>对于移动来说，当达到距离时则视为成功，这里是用作判断持续行为的成功结束条件。</li>
  <li>而对于释放攻击来说，如果不满足释放距离则会释放失败，这里是用作开始执行的前置条件。</li>
</ul>

<p>留意<strong>开始执行的前置条件</strong>，在添加命令的时候就可以进行一次检测，那为什么不在添加命令的时候就进行检测呢？对比下面这两个例子：</p>

<ul>
  <li>添加指令时检测距离</li>
</ul>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 添加指令时检测距离</span>
<span class="n">AddGoal_BlaBla</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9999</span><span class="p">)</span> <span class="c1">-- 添加释放攻击动作1、时间10秒、释放前检测9999米</span>
<span class="k">if</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="k">then</span> <span class="c1">-- 判断距离小于5米</span>
    <span class="n">AddGoal_BlaBla</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9999</span><span class="p">)</span> <span class="c1">-- 添加释放攻击动作2、时间10秒、释放前检测9999米</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>指令执行时检测距离</li>
</ul>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 指令执行时检测距离</span>
<span class="n">AddGoal_BlaBla</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9999</span><span class="p">)</span> <span class="c1">-- 添加释放攻击动作1、时间10秒、释放前检测9999米</span>
<span class="n">AddGoal_BlaBla</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c1">-- 添加释放攻击动作2、时间10秒、释放前检测5米内</span>
</code></pre></div></div>

<p>其实标注已经暴露了核心问题，添加指令时和指令执行时，可能不是同一时刻，而这个单独的检测选项就是解决这个问题，<strong>确保能在指令执行时，进行检测。</strong></p>

<p>听起来有点像打补丁的做法，解决的核心问题是：决策进行的瞬间，一次性可能添加了很多动作序列；序列靠后被执行的单个动作，<strong>轮到它的时候，前置条件已经失去了意义</strong>。</p>

<p>在行为树的语境中其实不存在这个问题，运行节点会完美过渡时间，轮到这个节点执行前才会真的进行这个节点的检测，但也可能，就是因为这种模糊性，会带来类似“空挥”的体验，这里不再展开讨论了。</p>

<h3 id="其他架构逻辑">其他架构逻辑</h3>

<p>这里讨论一些其他的、用于逻辑表达的小设计。</p>

<h4 id="行为概率与行为cd">行为概率与行为CD</h4>

<p>前面我们提到过，由决策逻辑调用行动逻辑的函数：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/13.png" alt="" /></p>

<p>但是这个过程还是挺有意思的，并没有直接去调用函数，而是使用概率做中转，再去调用对应的函数。</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 首先整了几个“表格”做中转</span>
<span class="kd">local</span> <span class="n">f2_local0</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">local</span> <span class="n">f2_local1</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">local</span> <span class="n">f2_local2</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1">-- 当决策的时候，</span>
<span class="c1">-- 将X号行为的发生概率储存到，0号表格，Key为X的值里</span>
<span class="k">if</span> <span class="n">f2_local5</span> <span class="o">&gt;=</span> <span class="mi">18</span> <span class="k">then</span>
    <span class="n">f2_local0</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">50</span>
    <span class="n">f2_local0</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="mi">800</span>
    <span class="n">f2_local0</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span> <span class="mi">50</span>
    <span class="n">f2_local0</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="mi">50</span>
    <span class="n">f2_local0</span><span class="p">[</span><span class="mi">43</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span>
<span class="k">elseif</span> <span class="n">f2_local5</span> <span class="o">&gt;=</span> <span class="mi">12</span> <span class="k">then</span>
<span class="c1">-- ...</span>
<span class="k">elseif</span> <span class="n">f2_local5</span> <span class="o">&gt;=</span> <span class="mi">5</span> <span class="k">then</span>
<span class="c1">-- ...</span>
<span class="k">end</span>

<span class="c1">-- 检查冷却，如果不满足，概率直接打到1</span>
<span class="n">f2_local0</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">SetCoolTime</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="mi">3000</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">f2_local0</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">f2_local0</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">SetCoolTime</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="mi">3003</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">f2_local0</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span>
<span class="c1">-- ...</span>
<span class="n">f2_local0</span><span class="p">[</span><span class="mi">46</span><span class="p">]</span> <span class="o">=</span> <span class="n">SetCoolTime</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="mi">3005</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">f2_local0</span><span class="p">[</span><span class="mi">46</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1">-- 将X号行为的函数储存到，1号表格，Key为X的值里</span>
<span class="n">f2_local1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">REGIST_FUNC</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg0</span><span class="p">.</span><span class="n">Act01</span><span class="p">)</span>
<span class="n">f2_local1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">REGIST_FUNC</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg0</span><span class="p">.</span><span class="n">Act02</span><span class="p">)</span>
<span class="c1">-- ...</span>
<span class="n">f2_local1</span><span class="p">[</span><span class="mi">48</span><span class="p">]</span> <span class="o">=</span> <span class="n">REGIST_FUNC</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg0</span><span class="p">.</span><span class="n">Act48</span><span class="p">)</span>

<span class="c1">-- 最后调用，根据0号表格的概率调用 1号表格储存的函数行为</span>
<span class="c1">-- 此处函数完整内容可参考</span>
<span class="c1">-- aicommon-luabnd-dcx\script\ai\out\bin\common_battle_func.dec.lua</span>
<span class="n">Common_Battle_Activate</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">f2_local0</span><span class="p">,</span> <span class="n">f2_local1</span><span class="p">,</span> <span class="n">f2_local13</span><span class="p">,</span> <span class="n">f2_local2</span><span class="p">)</span>
</code></pre></div></div>

<p>如果上面的内容稍微有点复杂，没关系，举个具体的例子：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/14.png" alt="" /></p>

<p>在某个情形下，如果我们决定使用Act01和Act02行为，且概率为100:50，那么我们<strong>并不会直接进行随机数的比较后调用函数</strong>，而是会将概率储存下来，同时将行为也储存下来，两者维持下标相同。这样脱钩后，甚至还可以进行一次CD的检测，如果不满足CD，则可以直接将概率打到最小，（为1不为0也处理了所有行为都CD时，至少可以随机出结果。）最后，再根据概率去调用对应的行为。</p>

<p>这样做的好处是显而易见的，它允许我们<strong>将可用性检测——比如CD或者其他规则，放在决策之后</strong>，一方面保证了可用性的筛选，另一方面也避免了先进行可用性检测的麻烦，甚至概率为1而不为0的小细节，也覆盖了全部行为都在CD的边界情况。</p>

<blockquote>
  <p>在行为树的语境中，先进行可用性检测可以使用封装了自规划的算法的节点，选取可用性最高的行为。</p>

  <p>在实际的工作中，有时没有规划算法的节点，最常见的情形和解决是，检测到攻击仍然处于CD，干脆失败向后决策，用发呆来作为保底。</p>
</blockquote>

<h4 id="信息感知与标记buff">信息感知与标记BUFF</h4>

<p>对于一个动作游戏的AI，除了常规的HP、MP、位置等信息，对于敌我<strong>动作状态</strong>的检测逻辑应该会很多，动作游戏嘛，玩的就是动作之间的规则。</p>

<p>只狼也不例外，一些信息的获取、判断如下所示：</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Goal.Activate 局部变量</span>
<span class="kd">local</span> <span class="n">f2_local3</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetHpRate</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">f2_local4</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetSpRate</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">f2_local5</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetDist</span><span class="p">(</span><span class="n">TARGET_ENE_0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">f2_local6</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetRandam_Int</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">f2_local7</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetExcelParam</span><span class="p">(</span><span class="n">AI_EXCEL_THINK_PARAM_TYPE__thinkAttr_doAdmirer</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">f2_local8</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetEventRequest</span><span class="p">()</span>
<span class="kd">local</span> <span class="n">f2_local9</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetEventRequest</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">f2_local10</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetDistY</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">f2_local11</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetDistY</span><span class="p">(</span><span class="n">TARGET_ENE_0</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">f2_local12</span> <span class="o">=</span> <span class="n">arg1</span><span class="p">:</span><span class="n">HasSpecialEffectId</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">,</span> <span class="mi">200050</span><span class="p">)</span>
<span class="c1">-- Goal.Activate 变量检测</span>
<span class="k">elseif</span> <span class="ow">not</span> <span class="ow">not</span> <span class="n">arg1</span><span class="p">:</span><span class="n">HasSpecialEffectId</span><span class="p">(</span><span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="mi">110060</span><span class="p">)</span> <span class="ow">or</span> <span class="n">arg1</span><span class="p">:</span><span class="n">HasSpecialEffectId</span><span class="p">(</span><span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="mi">110010</span><span class="p">)</span> <span class="k">then</span>
        <span class="n">f2_local0</span><span class="p">[</span><span class="mi">39</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span>
<span class="k">elseif</span> <span class="n">Common_ActivateAct</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span> <span class="k">then</span>
</code></pre></div></div>

<p>总结归纳一下，常规的信息大致包括这些：</p>

<ul>
  <li>属性类
    <ul>
      <li>HP</li>
      <li>SP</li>
      <li>固有Excel变量</li>
    </ul>
  </li>
  <li>空间类
    <ul>
      <li>敌我距离</li>
      <li>距地面高度</li>
      <li>敌我角度</li>
      <li>障碍物检测</li>
    </ul>
  </li>
  <li>随机类
    <ul>
      <li>随机整数</li>
      <li>随机小数</li>
    </ul>
  </li>
</ul>

<p>而关于动作的检测，除了一些经过封装的函数或者事件，大部分都是<strong>用标记BUFF实现</strong>的。</p>

<p>一个很典型的例子是蝴蝶夫人的弹反动作，左方向8400，右方向8401，分别添加了200211和200210，两个不同的标记异常状态，这样AI就可以通过检测对于的标记buff，来知道是蝴蝶夫人是在左弹还是右弹。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/12.png" alt="" /></p>

<p>再进一步，可以根据左右弹设计不同的出招逻辑：</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 509000 蝴蝶夫人</span>
<span class="c1">-- Goal.Kengeki_Activate 逻辑判断</span>
    <span class="k">elseif</span> <span class="n">f48_local0</span> <span class="o">==</span> <span class="mi">200210</span> <span class="k">then</span>
        <span class="k">if</span> <span class="n">f48_local4</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="k">then</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">50</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span>
        <span class="k">elseif</span> <span class="n">SpaceCheck</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">==</span> <span class="kc">false</span> <span class="k">then</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">80</span>
        <span class="k">else</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">15</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="mi">15</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span>
        <span class="k">end</span>
    <span class="k">elseif</span> <span class="n">f48_local0</span> <span class="o">==</span> <span class="mi">200211</span> <span class="k">then</span>
        <span class="k">if</span> <span class="n">f48_local4</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="k">then</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">50</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span>
        <span class="k">elseif</span> <span class="n">SpaceCheck</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">==</span> <span class="kc">false</span> <span class="k">then</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">40</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">60</span>
        <span class="k">else</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">40</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span>
            <span class="n">f48_local1</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">60</span>
        <span class="k">end</span>
</code></pre></div></div>

<p>猜测接口上，除了自己给自己加标记buff，应该也是可以定向给敌人加的。</p>

<p>小结一下：以标记buff作为检测动作的中间层，可以<strong>一定程度上让逻辑与具体的Action检测脱钩</strong>，避免AI与动作的强耦合，带来修改时的麻烦。但是也会需要buff自身是一个简单易用、高效的功能。</p>

<h4 id="计时器角色变量事件与打断">计时器/角色变量/事件与打断</h4>

<p>这里是发现到的一些适用于逻辑编写的功能。</p>

<ul>
  <li>计时器</li>
</ul>

<p>上文提到CD其实也是一种计时器，有些时候如果要控制指定逻辑出现的间隔，就可以使用计时器，大概有以下功能：</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 开始计时，参数1是记时器的编号，参数2是计时器的倒计时时间</span>
<span class="n">arg0</span><span class="p">:</span><span class="n">SetTimer</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="c1">-- 比较指定计时器的现在的记时</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">GetTimer</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
<span class="c1">-- 检测指定计时器的记时是否结束</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">IsFinishTimer</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="kc">true</span>
</code></pre></div></div>

<p>只狼的计时器大概是只有16个，事实上也足够了。</p>

<ul>
  <li>角色变量</li>
</ul>

<p>使用角色变量可以方便的在不同逻辑之前储存信息、检查信息：</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 设置指定变量到指定值</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">SetNumber</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="c1">-- 设置指定变量自增</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">SetNumber</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">arg1</span><span class="p">:</span><span class="n">GetNumber</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="c1">-- 检测指定变量的值</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">GetNumber</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</code></pre></div></div>

<p>之前在哪里看到过好像4号变量和弹刀有关，记不清了，可见有些变量应该是全角色通用、有统一含义的。</p>

<p>变量的槽位好像也是16个，和计时器一样，固定数目一方面一般不会达到上限，另一方面也可以保证实现起来较为简单、性能开销较为可控。<strong>16这个数值感觉是个可参考值</strong>。</p>

<ul>
  <li>事件与打断</li>
</ul>

<p>严格意义上感觉不能叫事件，或者叫监听？当发生一些事件时，就会打断原有决策，重新进行打断决策。</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 添加区域监听</span>
<span class="n">arg0</span><span class="p">:</span><span class="n">AddObserveArea</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">TARGET_SELF</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">AI_DIR_TYPE_F</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="c1">-- 删除区域监听</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">DeleteObserve</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="c1">-- 判断打断类型：在区域外打断</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">IsInterupt</span><span class="p">(</span><span class="n">INTERUPT_Outside_ObserveArea</span><span class="p">)</span>

<span class="c1">-- 添加Buff监听</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">AddObserveSpecialEffectAttribute</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">,</span> <span class="mi">5025</span><span class="p">)</span>
<span class="c1">-- 判断打断Buff类型</span>
<span class="n">arg1</span><span class="p">:</span><span class="n">GetSpecialEffectActivateInterruptType</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">5039</span>

<span class="c1">-- 处理打断</span>
<span class="n">Goal</span><span class="p">.</span><span class="n">Interrupt</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">arg0</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
    <span class="c1">-- ...</span>
    <span class="c1">-- 打断后检测使用道具！药检.jpeg</span>
    <span class="k">if</span> <span class="n">Interupt_Use_Item</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="k">then</span>
        <span class="n">arg1</span><span class="p">:</span><span class="n">Replanning</span><span class="p">()</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="k">end</span>
    <span class="c1">-- ...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>在打断的逻辑里面看到了使用道具，合理推测这就是传说中的药检的逻辑。</p>

<p>事件与打断为AI提供了<strong>一种针对环境的变化快速反应的能力——反应性</strong>，合理使用这部分机制，可以让AI更加生动。但这部分逻辑如果过于“单薄”，也会很容易被玩家利用。</p>

<h4 id="封装">封装</h4>

<p>前面提到过解决复杂度的问题，是游戏AI的核心问题之一，封装也是一种有效的方法，它可以<strong>有效提供逻辑的复用</strong>。</p>

<p>只狼中大部分封装的逻辑都在<code class="language-plaintext highlighter-rouge">aicommon-luabnd-dcx\script\ai\out\bin\</code>目录，大概分为以下几类：</p>

<ul>
  <li><strong>常量类</strong>：比如<code class="language-plaintext highlighter-rouge">ai_define.dec.lua</code>、<code class="language-plaintext highlighter-rouge">logic_list.dec.lua</code>，</li>
</ul>

<p>构成：里面定义了一堆常量变量</p>

<p>功能：当枚举值用，增加可读性</p>

<ul>
  <li><strong>具体行为类</strong>：比如<code class="language-plaintext highlighter-rouge">approach_on_failed_path.dec.lua</code></li>
</ul>

<p>构成：描述一个行为的过程，里面分为<code class="language-plaintext highlighter-rouge">Activate</code>、<code class="language-plaintext highlighter-rouge">Update</code>、<code class="language-plaintext highlighter-rouge">Terminate</code>、<code class="language-plaintext highlighter-rouge">Interupt</code>几个部分</p>

<p>功能：大概可以分为移动、攻击、功能三大类</p>

<ul>
  <li><strong>辅助函数类</strong>：比如<code class="language-plaintext highlighter-rouge">common_battle_func.dec.lua</code></li>
</ul>

<p>构成：直接以函数的语法编写一些函数</p>

<p>功能：提供编写逻辑的一些便利性</p>

<p>理论上来说，好的封装是成功的一半，能极大降低新AI编写的工作量。</p>

<h3 id="小结思路与格局打开">小结：思路与格局打开</h3>

<p>本节讨论了相当多的思路、机制上的东西，使用这些“手法”，可以解决非常多的问题。</p>

<p>在这一节结束的时候想重新强调，“使用成本”这个话题，很多时候应该<strong>尽可能的降低使用成本</strong>，减少中间环节。比如申明一个Buff这样基础的操作，如果成本增加——比如步骤多一步，时长增加5秒，由于行为处于基层位置，很可能对最后产生指数级别的时长影响。</p>

<h2 id="感受与细节设计">感受与细节设计</h2>

<p>讨论了很多“虚”的东西以后，本部分我们讨论具体的狮子猿AI逻辑，着重分析行为逻辑和对应的感受。</p>

<p>思考了很久这部分应该如何去呈现，最后的结论是还是<strong>一条一条过一遍</strong>。也方便读者感受一个真实的AI是什么样子的。</p>

<h3 id="行为逻辑">行为逻辑</h3>

<p>本来是打算先说决策逻辑的，后来发现如果<strong>不看行为看决策会一头雾水</strong>，所以这里先从行为开始看起。</p>

<p>一共40个具体行为，有一部分后续的决策中没有使用。这里按照动画之前行为的感受初步划分：黄色为花里胡哨、红色为高危记忆点、绿色演出性质，总览整理如下：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/20.png" alt="" /></p>

<blockquote>
  <p>这里也录制了1-20号行为的演示视频，末尾还有一段战斗过程的切片，可以参考<a href="https://www.bilibili.com/video/BV1iw411M74j">Bilibili 狮子猿 AI行为演示</a></p>
</blockquote>

<p>接下来我们挑一些行为具体看看：</p>

<h4 id="act01-96-r2230003001">Act01 9.6-R(2.2);3000;3001</h4>

<p>一些没用到的变量这里就直接删掉了，精简后如下：</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Goal</span><span class="p">.</span><span class="n">Act01</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">arg0</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f3_local0</span> <span class="o">=</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetDist</span><span class="p">(</span><span class="n">TARGET_ENE_0</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f3_local1</span> <span class="o">=</span> <span class="mi">9</span><span class="p">.</span><span class="mi">6</span> <span class="o">-</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetMapHitRadius</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f3_local4</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="k">if</span> <span class="n">f3_local1</span> <span class="o">&lt;</span> <span class="n">f3_local0</span> <span class="k">then</span>
        <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ApproachTarget</span><span class="p">,</span> <span class="n">f3_local4</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">f3_local1</span><span class="p">,</span> <span class="n">TARGET_SELF</span><span class="p">,</span> <span class="n">f3_local3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="kd">local</span> <span class="n">f3_local5</span> <span class="o">=</span> <span class="mi">3000</span>
    <span class="kd">local</span> <span class="n">f3_local6</span> <span class="o">=</span> <span class="mi">3001</span>
    <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ComboTunable_SuccessAngle180</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">f3_local5</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="mi">999</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ComboRepeat_SuccessAngle180</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">f3_local6</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="mi">999</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">arg0</span><span class="p">:</span><span class="n">SetNumber</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">GetWellSpace_Odds</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">GetWellSpace_Odds</span>
<span class="k">end</span>
</code></pre></div></div>

<p>这部分逻辑还是挺简单的，大概的意思是调整位置，放俩攻击。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/3-1.png" alt="" /></p>

<p>虽然简单，但是基本上所有的行为<strong>都是这个的简化或者复杂化</strong>，后面的行为也会以这个为模板展开说明。</p>

<p>说一些中间有意思的点：</p>

<ul>
  <li>距离比较与狮子猿半径</li>
</ul>

<p>之前简要标注的时候写的是<code class="language-plaintext highlighter-rouge">9.6-R(2.2);3000;3001</code>，后面俩是招式名字，为啥前面写的是9.6-R呢？</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/3-2.png" alt="" /></p>

<p>画了一个图方便理解，用于与敌我距离进行比较的值，是<strong>固定值减去了自身半径的值</strong>，也就是说只狼中敌我距离的计算是<strong>计算到阻挡外边缘</strong>的，由于这个值同时用到了后面的靠近逻辑中的目标值，我们可以反向算出狮子猿猴的半径是2.2米，于是有了上面这个标注。</p>

<ul>
  <li>运行时检测之距离不敏感</li>
</ul>

<p>后面两个攻击的检测距离都是999，前面架构方面有提到相关的东西，这里就是一个<strong>会空挥的、距离不敏感</strong>的例子。</p>

<h4 id="act02-92-r22300334-3004">Act02 9.2-R(2.2);3003;3.4-&gt;3004</h4>

<p>Act02和Act01的区别除了换了招式和距离，另外就是释放时是<strong>距离敏感</strong>的，太远就不会放了。</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Goal</span><span class="p">.</span><span class="n">Act02</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">arg0</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f4_local0</span> <span class="o">=</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetDist</span><span class="p">(</span><span class="n">TARGET_ENE_0</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f4_local1</span> <span class="o">=</span> <span class="mi">9</span><span class="p">.</span><span class="mi">2</span> <span class="o">-</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetMapHitRadius</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f4_local2</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">local</span> <span class="n">f4_local3</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="k">if</span> <span class="n">f4_local1</span> <span class="o">&lt;</span> <span class="n">f4_local0</span> <span class="k">then</span>
        <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ApproachTarget</span><span class="p">,</span> <span class="n">f4_local3</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">f4_local1</span><span class="p">,</span> <span class="n">TARGET_SELF</span><span class="p">,</span> <span class="n">f4_local2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">else</span>

    <span class="k">end</span>
    <span class="kd">local</span> <span class="n">f4_local4</span> <span class="o">=</span> <span class="mi">3003</span>
    <span class="kd">local</span> <span class="n">f4_local5</span> <span class="o">=</span> <span class="mi">3004</span>
    <span class="kd">local</span> <span class="n">f4_local7</span> <span class="o">=</span> <span class="mi">9</span><span class="p">.</span><span class="mi">2</span> <span class="o">-</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetMapHitRadius</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f4_local8</span> <span class="o">=</span> <span class="mi">5</span><span class="p">.</span><span class="mi">6</span> <span class="o">-</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetMapHitRadius</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f4_local9</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">local</span> <span class="n">f4_local10</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ComboAttackTunableSpin</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">f4_local4</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">f4_local7</span><span class="p">,</span> <span class="n">f4_local9</span><span class="p">,</span> <span class="n">f4_local10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ComboFinal</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">f4_local5</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">f4_local8</span><span class="p">,</span> <span class="n">f4_local9</span><span class="p">,</span> <span class="n">f4_local10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">arg0</span><span class="p">:</span><span class="n">SetNumber</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">GetWellSpace_Odds</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">GetWellSpace_Odds</span>
<span class="k">end</span>
</code></pre></div></div>

<p>这里的3003的这个前置距离检测，其实可以不用检测，因为上面刚刚执行了靠近，两个距离数值一样，且中中间没有时间差。</p>

<h4 id="act03-268-r223008">Act03 26.8-R(2.2);…;3008</h4>

<p>这应该是第一个稍微复杂的逻辑，和之前思路是类似的。</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Goal</span><span class="p">.</span><span class="n">Act03</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">arg0</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f5_local0</span> <span class="o">=</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetDist</span><span class="p">(</span><span class="n">TARGET_ENE_0</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f5_local1</span> <span class="o">=</span> <span class="mi">26</span><span class="p">.</span><span class="mi">8</span> <span class="o">-</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetMapHitRadius</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f5_local2</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">local</span> <span class="n">f5_local3</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="c1">-- 太远靠近</span>
    <span class="k">if</span> <span class="n">f5_local1</span> <span class="o">&lt;</span> <span class="n">f5_local0</span> <span class="k">then</span>
        <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ApproachTarget</span><span class="p">,</span> <span class="n">f5_local3</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">f5_local1</span><span class="p">,</span> <span class="n">TARGET_SELF</span><span class="p">,</span> <span class="n">f5_local2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="c1">-- 太近远离1</span>
    <span class="k">elseif</span> <span class="n">f5_local1</span> <span class="o">-</span> <span class="mi">8</span> <span class="o">&lt;</span> <span class="n">f5_local0</span> <span class="k">then</span>
        <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_AttackTunableSpin</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3023</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">SuccessDist1</span><span class="p">,</span> <span class="n">TurnTime</span><span class="p">,</span> <span class="n">FrontAngle</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="c1">-- 太太近远离2</span>
    <span class="k">elseif</span> <span class="n">f5_local1</span> <span class="o">-</span> <span class="mi">24</span> <span class="o">&lt;</span> <span class="n">f5_local0</span> <span class="k">then</span>
        <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_SpinStep</span><span class="p">,</span> <span class="n">StepLife</span><span class="p">,</span> <span class="mi">5211</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">TurnTime</span><span class="p">,</span> <span class="n">AI_DIR_TYPE_F</span><span class="p">,</span> <span class="n">CourseLong</span><span class="p">)</span>
    <span class="k">else</span>
    <span class="c1">-- 太太太近远离并直接中断</span>
        <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_AttackTunableSpin</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3023</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="n">SuccessDist1</span><span class="p">,</span> <span class="n">TurnTime</span><span class="p">,</span> <span class="n">FrontAngle</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="k">end</span>
    <span class="kd">local</span> <span class="n">f5_local4</span> <span class="o">=</span> <span class="mi">3008</span>
    <span class="kd">local</span> <span class="n">f5_local5</span> <span class="o">=</span> <span class="mi">26</span><span class="p">.</span><span class="mi">8</span> <span class="o">-</span> <span class="n">arg0</span><span class="p">:</span><span class="n">GetMapHitRadius</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f5_local6</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">local</span> <span class="n">f5_local7</span> <span class="o">=</span> <span class="mi">120</span>
    <span class="c1">-- 检测阻挡相关</span>
    <span class="k">if</span> <span class="n">arg0</span><span class="p">:</span><span class="n">IsExistMeshOnLine</span><span class="p">(</span><span class="n">TARGET_SELF</span><span class="p">,</span> <span class="n">AI_DIR_TYPE_F</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span> <span class="k">then</span>
        <span class="n">arg1</span><span class="p">:</span><span class="n">AddSubGoal</span><span class="p">(</span><span class="n">GOAL_COMMON_ComboTunable_SuccessAngle180</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">f5_local4</span><span class="p">,</span> <span class="n">TARGET_ENE_0</span><span class="p">,</span> <span class="mi">9999</span><span class="p">,</span> <span class="n">f5_local6</span><span class="p">,</span> <span class="n">f5_local7</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="k">end</span>
    <span class="n">GetWellSpace_Odds</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">GetWellSpace_Odds</span>
<span class="k">end</span>
</code></pre></div></div>

<p>简单来说，在执行一个有很长一段靠近前摇的抓取攻击前，有一些<strong>差异化的自定义远离</strong>逻辑。（也侧面说明了前面的俩行为是<strong>只管玩家和怪物过远</strong>、不管过近的，默认近是可以兼容的）</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/3-3.png" alt="" /></p>

<p>此外，这里还第一次出现了空间障碍相关检测，后面也可以看到，只狼里面<strong>有相当多的、细致的空间检测</strong>，以避免不合适的行为——比如怼墙走等行为。</p>

<h4 id="act04-以后">Act04 以后</h4>

<p>后面我们就不逐一展开说了，有兴趣的同学可以去看<a href="/assets/img/gameplay/sekiro_lion_tamarion_ai/510000_battle.dec.lua">原始文件</a>。</p>

<p>这里我们给出一个将行为放到状态机上的联动图，可以点开查看大图：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/3-0.png" alt="" /></p>

<h4 id="简要小结">简要小结</h4>

<p>简单总结下：</p>

<ul>
  <li>微观的基本范式：靠近+攻击</li>
</ul>

<p>除了原地直接放的招式，大部分都是靠近后攻击，再在此基础上进行<strong>距离敏感、调整位置、随机变招、距离决策</strong>等行为的丰富逻辑。</p>

<ul>
  <li>宏观攻击感受的营造：短而密</li>
</ul>

<p>大部分的连招都是2个攻击动作——当然具体的攻击Hit数可能不止，最多也就是3个，并没有之前分析中的超超超长连招。</p>

<p>但是，攻击的构成是非常密的，应该只有两处刻意发呆对峙，以此来营造<strong>战斗的持续压迫感</strong>。</p>

<ul>
  <li>唯一指定未使用动作：3007</li>
</ul>

<p>整个AI里面未发现使用3007的行为，但是实际体验中记得还是会出现。可见在目前AI的范围之外，应该还是有一些动作自动跳转之类的逻辑的。</p>

<h3 id="主决策逻辑">主决策逻辑</h3>

<p>决策部分，分成三个部分方便理解：</p>

<h4 id="前置行为">前置行为</h4>

<p>正如架构篇所讨论的，在主决策逻辑的一开始是一些初始化工作，大致如下图所示：</p>

<ul>
  <li>获取一些信息储存到变量</li>
</ul>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/15.png" alt="" /></p>

<ul>
  <li>添加一些Buff的监听。</li>
</ul>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/15-1.png" alt="" /></p>

<h4 id="决策部分-外围">决策部分-外围</h4>

<p>然后就开始了具体的决策部分：</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/17-1.png" alt="" /></p>

<p>最外围，这里认为是一些针对特定情况立刻做出反应的逻辑，一共10个。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/17-2.png" alt="" /></p>

<ul>
  <li>立刻反应：死亡</li>
</ul>

<p>比如动作20其实是死亡结算动作，可见这个事件应该就是检测死亡（或者检测转阶段）。大部分逻辑都可以通过行为去揣测检测条件的含义，部分不知道是啥的也不乱猜了。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/17-3.png" alt="" /></p>

<ul>
  <li>特殊情况：距离太远</li>
</ul>

<p>稍微有点意思的是处理距离过远时候，用的数值是10米，10米并不不算远，所以还配合了一个标记Buff 5030。执行的行为也很有意思，是原地拍地吼，之前拆动画的时候还没有意思到，后面才想起来这个动作是可以用义手勾过去快速拉近距离的。感觉意思是：<strong>距离太远，直接勾引你过来</strong>。你不来，我再主动靠近。</p>

<ul>
  <li>特殊情况：处于背后</li>
</ul>

<p>另外一个类似的特殊检测是在玩家背后，其实这里感觉是玩家在狮子猿背后？</p>

<p>这里有两个需要注意的，其一是这些行为都是挑选出来的可以有转向过程能自然转向覆盖打到玩家的。</p>

<p>其二是这里先进行了一个距离划分，10、11、42比较普通，重点是7米内时还会有一个专门打身后的4号行为，而且比重很大。可以认为大多情况都是4。下面我们也会看到很多<strong>以较大比重来突出主要行为的技巧</strong>。</p>

<h4 id="决策部分-event1-10-or-1--1">决策部分-Event(1) 10 or 1 == 1</h4>

<p>这里是上文第三个决策的展开，因为选项太多了所以单独陈述。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/18.png" alt="" /></p>

<p>首先我们可以看到因为处于比较靠前的位置，这里仍然处理了3.1背后、3.2 &amp; 3.3等特殊标记等情况下的行为。</p>

<p>并且这里还有一个<strong>检测敌人崩架势</strong>后的逻辑，远就扔屎、近就敏捷一打。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/18-1.png" alt="" /></p>

<p>最后是一切默认情况下的攻击，也是目前看到决策最复杂的一个。粗看了一下行为，概率最高的行为分别是扔屎和下端危，似乎压力还蛮大的。</p>

<p>在默认情况以后，还会做一些后置检测有一个计时器和空间位置的检测。</p>

<h4 id="决策部分-默认">决策部分-默认</h4>

<p>这里就是最最最默认情况下狮子猿的出招逻辑。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/19-1.png" alt="" /></p>

<p>首先10.1也还是进行了一些特殊情况的检测，不过由于外层就已是是最后一个检测的了，所以重复检测也没意义。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/19-2.png" alt="" /></p>

<p>然后是默认情况的攻击行为。分得非常细，行为也很多，没有明显的特征，可以结合前面的行为含义表具体分析下。并且还有检测3号计时器完成，增加33 &amp; 34侧跳的逻辑。</p>

<blockquote>
  <p>发现上面截图的时候真不能用行为:行为 = 概率:概率，很容易看错位。</p>
</blockquote>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/19-3.png" alt="" /></p>

<p>最后是一堆后置检测，比如</p>

<ul>
  <li>计时器4未完成 &amp; 血量太低，关掉原地吼的概率。</li>
  <li>计时器1未完成，关掉36 &amp; 42的侧跳位移概率。</li>
  <li>空间比较少，42左右小跳步</li>
  <li>一些特殊标记Buff……</li>
</ul>

<h4 id="后置行为">后置行为</h4>

<p>这部分也和架构篇所讨论的没啥区别，给对应的行为检测CD，如果在CD中就把概率改到最小。</p>

<p>应该基本都是攻击行为，似乎位移发呆之类的用单独的计时器去统计了。</p>

<p><img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/16.png" alt="" /></p>

<h3 id="剑戟弹刀逻辑等">剑戟（弹刀）逻辑等</h3>

<p>狮子猿是似乎没弹刀逻辑的，狮子猿的部分逻辑如下所示
<img src="https://design.jskyzero.com/assets/img/gameplay/sekiro_lion_tamarion_ai/21.png" alt="" /></p>

<p>这部分参考蝴蝶夫人会比较好，就目前的了解来说，似乎是<code class="language-plaintext highlighter-rouge">Goal.Parry</code>负责格挡，然后<code class="language-plaintext highlighter-rouge">Kengeki_Activate</code>在负责根据敌我关系——主要是格挡的动作，来进行格挡派生的选择，类似上文有举到的案例，有兴趣的同学可以自行研究。</p>

<h3 id="总结">总结</h3>

<p>对于具体行为的分析的工作量比预想中要大很多，甚至没能做到在脑海中模拟这些行为跑起来的样子。</p>

<p>虽然细节上做的不够，但是框架上还是盘得很明白的：</p>

<ul>
  <li>行为上是以【靠近、攻击】为基本模板。</li>
  <li>决策上优先处理必须相应和特殊状态的行为，最后再默认行为。</li>
  <li>以CD、计时器等工具再次调控行为。</li>
</ul>

<h2 id="全文总结">全文总结</h2>

<p>本文三个部分概述了体验层次的反推、架构设计的一些讨论、复杂的动作游戏AI的全貌，希望能对读者有所启发。</p>

<p>本文断断续续写了有一个月左右，文字内容很长，需要一边思考一边阅读。本文是从逆向工程出发，难免有所纰漏，欢迎指正讨论。</p>]]></content><author><name></name></author><category term="游戏AI" /><summary type="html"><![CDATA[之前拆包看了只狼的狮子猿的一阶段动画，本文则会对怪物的AI进行一些讨论和分析，并对之前文章的一些错误结论进行勘误。]]></summary></entry><entry><title type="html">0-汇总-23年的ARPG们</title><link href="https://design.jskyzero.com/2023/07/17/2023_half_arpg/" rel="alternate" type="text/html" title="0-汇总-23年的ARPG们" /><published>2023-07-17T00:00:00+00:00</published><updated>2023-07-17T00:00:00+00:00</updated><id>https://design.jskyzero.com/2023/07/17/2023_half_arpg</id><content type="html" xml:base="https://design.jskyzero.com/2023/07/17/2023_half_arpg/"><![CDATA[<h1 id="聊聊2023年的arpg们">聊聊2023年的ARPG们</h1>

<h2 id="前言">前言</h2>

<p>眨眼已经9月了，试着回忆了一下过去一年玩的动作游戏，记录下一些相关的思考。</p>

<p>先贴一个热度图，图上甚至还可以看出来纯血ACT与ARPG现在“市场份额”的区别。</p>

<p><img src="/assets/img/act/2023/1.jpg" alt="" /></p>

<h2 id="mhrsb-140">MHRSB 14.0</h2>

<blockquote>
  <p>MHRSB 更新路线 <a href="https://www.monsterhunter.com/rise-sunbreak/update/zh-hk/">https://www.monsterhunter.com/rise-sunbreak/update/zh-hk/</a>
2022/08/26 11.0 月迅龙，红莲爆鳞龙，金火龙，银火龙
2022/09/29 12.0 茶棘龙，焰狐龙，霞龙（怪异克服），怪异调查等级120
2022/11/24 13.0 混沌黑蚀龙，炎王龙（怪异克服），钢龙（怪异克服），怪异调查等级200
2023/02/07 14.0 冰咒龙，天慧龙（怪异克服），怪异等级220
2023/04/02 15.0 岚龙，天廻龙（怪异克服），怪异等级300，特别探究任务
2023/06/08 16.0 原初爵银龙</p>
</blockquote>

<ul>
  <li>冰咒龙</li>
</ul>

<p>冰咒龙是一个非常好的对比<a href="https://youtu.be/QExRmPLdqNg">MHW</a>与<a href="https://www.youtube.com/watch?v=Pzz0cn74C7c">MHR</a>“感受”的例子，为什么MHW高清感受更好，而MHR感受欠缺。</p>

<p>顺带还刷到了这个TDS的这个对比<a href="https://www.youtube.com/watch?v=N-Q302xdBBE">Monster Hunter: Iceborne Details vs Sunbreak</a></p>

<ul>
  <li>天慧龙（怪异克服）</li>
</ul>

<p>天慧龙的怪异克服阶段的二连击着实有些帅！对比原版让人耳目一新。</p>

<ul>
  <li><a href="https://www.bilibili.com/video/BV1m24y1W7eQ">怪异克服天彗龙全招式展示</a></li>
  <li>
    <p><a href="https://www.bilibili.com/video/BV1ZU4y1r7tY">天彗龙全招式展示</a></p>
  </li>
  <li>怪异等级220</li>
</ul>

<p>刷子游戏的末路！</p>

<h2 id="wild-hearts">WILD HEARTS</h2>

<p>新意和缺点都十分明显的游戏。</p>

<ul>
  <li>大地图</li>
  <li>机巧立回</li>
  <li>
    <p>形象新颖的怪物<a href="https://www.youtube.com/playlist?list=PL7bwjwx5WwdcT4u6W_hR8UsrEbgpljzxP">Wild Hearts Boss Fights</a></p>
  </li>
  <li>糟糕的3C &amp; 卡顿 &amp; 立回感受</li>
</ul>

<h2 id="wolong">WOLONG</h2>

<p>未能达到玩家期待的游戏。</p>

<p>大部分该说的之前demo就说过。</p>

<ul>
  <li><a href="https://www.youtube.com/playlist?list=PL7bwjwx5Wwdd8sWb3u8jNaMbLINIzK4_4">全BOSS</a></li>
</ul>

<h2 id="mhrsb-150">MHRSB 15.0</h2>

<ul>
  <li>岚龙</li>
</ul>

<p><a href="https://www.bilibili.com/video/BV1Ac411n7ze">岚龙全招式展示</a></p>

<ul>
  <li>天廻龙（怪异克服）</li>
</ul>

<p><a href="https://www.bilibili.com/video/BV1jg4y177oZ">怪异克服天廻龙全招式展示</a></p>

<ul>
  <li>怪异等级300</li>
</ul>

<p>和怪异克服天慧龙死磕，怪异克服天廻龙是真的不好打。</p>

<ul>
  <li>特别探究任务</li>
</ul>

<p>超特回归！</p>

<h2 id="zeldatotk">Zelda:TotK</h2>

<p>并未以战斗见长的游戏，但是战斗却非常复合主旨。</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=Ke5RlOetZgI">Zelda: Tears of the Kingdom - All Bosses (No Damage)</a></li>
</ul>

<h2 id="mhrsb-160">MHRSB 16.0</h2>

<ul>
  <li>原初爵银龙</li>
</ul>

<p><a href="https://www.bilibili.com/video/BV1js4y1y7Qv">原初爵银龙全招式展示</a></p>

<p>夺命13连！非常帅</p>

<h2 id="ff16">FF16</h2>

<p>除了个别boss战的场面突破预期，其他全面未达预期。</p>

<ul>
  <li><a href="https://www.youtube.com/playlist?list=PL7bwjwx5WwdfGEiYWu7y4erXyi9L-9213">全boss</a></li>
</ul>

<h2 id="wolong-dlc1">WOLONG DLC1</h2>

<ul>
  <li>三周目</li>
</ul>

<p>被迫重学化解，太狗屎了。点名饕餮、蒙眼少年</p>

<ul>
  <li>DLC1</li>
</ul>

<p>体量2个新关卡，魔化典韦也有点压迫力</p>

<h2 id="ac6">AC6</h2>

<p>一开始是没有想到装甲核心能有这么ACT的。</p>

<p>BOSS的设计也非常魂Like。</p>

<h2 id="双龙出海">双龙出海</h2>

<ul>
  <li>长后摇设计</li>
  <li>一骑当千</li>
  <li>分支选择</li>
</ul>

<h2 id="dota2">DOTA2</h2>

<ul>
  <li>MOBA是一种“固定视角、取消后摇僵直的ACT”</li>
  <li>DOTA 在对抗“维度”的设计</li>
  <li>加速模式的节奏变化</li>
</ul>]]></content><author><name></name></author><category term="游戏体验" /><summary type="html"><![CDATA[聊聊2023年的ARPG们]]></summary></entry><entry><title type="html">游戏设计：开放世界设计</title><link href="https://design.jskyzero.com/2023/06/17/OpenWorld/" rel="alternate" type="text/html" title="游戏设计：开放世界设计" /><published>2023-06-17T00:00:00+00:00</published><updated>2023-06-17T00:00:00+00:00</updated><id>https://design.jskyzero.com/2023/06/17/OpenWorld</id><content type="html" xml:base="https://design.jskyzero.com/2023/06/17/OpenWorld/"><![CDATA[<h1 id="游戏设计开放世界设计">游戏设计：开放世界设计</h1>

<h2 id="开发阶段及其概览">开发阶段及其概览</h2>

<h2 id="topdown设计">TopDown设计</h2>

<h2 id="九宫格设计">九宫格设计</h2>]]></content><author><name></name></author><summary type="html"><![CDATA[游戏设计：开放世界设计]]></summary></entry></feed>